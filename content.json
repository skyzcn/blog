{"meta":{"title":"老代码","subtitle":"代码片段","description":"PL/SQL, Java, Javascript 代码片段, 代码备忘","author":"程宣峰","url":"http://oracle.xyz"},"pages":[{"title":"个人介绍","date":"2017-04-21T11:37:31.000Z","updated":"2017-10-13T04:10:57.402Z","comments":true,"path":"about/index.html","permalink":"http://oracle.xyz/about/index.html","excerpt":"","text":"联系方式 手机: 18607935958 (微信) Email: skyz.cn#gmail.com 个人信息 个人标签: 程宣峰 男 32岁 已婚 工作年限: 10年 个人主页: www.skyz.cn"}],"posts":[{"title":"Spring参数绑定","slug":"Spring-parameter-binding","date":"2017-05-08T07:17:16.000Z","updated":"2017-10-13T05:28:23.753Z","comments":true,"path":"posts/Spring-parameter-binding.html","link":"","permalink":"http://oracle.xyz/posts/Spring-parameter-binding.html","excerpt":"","text":"参数绑定相关注解 @RequestParam，绑定单个请求数据，可以是URL中的数据，表单提交的数据或上传的文件； @PathVariable，绑定URL模板变量值； @CookieValue，绑定Cookie数据； @RequestHeader，绑定请求头数据； @ModelAttribute，绑定数据到Model； @SessionAttributes，绑定数据到Session； @RequestBody，用来处理Content-Type不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等； @RequestPart，绑定“multipart/data”数据，并可以根据数据类型进项对象转换； 基本数据类型-int如果参数的属性是required的, 可以用int. 如果不是required的, 需要使用包装类型Integer. 因为值为null会导致异常. Controller @RequestMapping(\"saysth.do\")public void test(int count) &#123;&#125; form &lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;input name=\"count\" value=\"10\" type=\"text\"/&gt;&lt;/form&gt;` 包装类型-integer Controller @RequestMapping(\"saysth.do\")public void test(Integer count) &#123;&#125; HTML&lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;input name=\"count\" value=\"10\" type=\"text\"/&gt;&lt;/form&gt;` 自定义对象类型 Model public class User &#123; private String firstName; private String lastName; ...&#125; Controller @RequestMapping(\"saysth.do\")public void test(User user) &#123;&#125; HTML&lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;input name=\"firstName\" value=\"张\" type=\"text\"/&gt; &lt;input name=\"lastName\" value=\"三\" type=\"text\"/&gt;&lt;/form&gt; 自定义复合对象类型 Model public class ContactInfo &#123; private String tel; private String address; public String getTel() &#123; return tel; &#125; ...&#125;public class User &#123; private String firstName; private String lastName; private ContactInfo contactInfo; ... getter &amp; setter&#125; Controller @RequestMapping(\"saysth.do\")public void test(User user) &#123; System.out.println(user.getFirstName()); System.out.println(user.getLastName()); System.out.println(user.getContactInfo().getTel()); System.out.println(user.getContactInfo().getAddress());&#125; HTML &lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;input name=\"firstName\" value=\"张\" /&gt;&lt;br&gt; &lt;input name=\"lastName\" value=\"三\" /&gt;&lt;br&gt; &lt;input name=\"contactInfo.tel\" value=\"13809908909\" /&gt;&lt;br&gt; &lt;input name=\"contactInfo.address\" value=\"北京海淀\" /&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Save\" /&gt;&lt;/form&gt; List Model public class User &#123; private String firstName; private String lastName; ...&#125;public class UserListForm &#123; private List&lt;User&gt; users; ...&#125; Controller @RequestMapping(\"saysth.do\")public void test(UserListForm userForm) &#123; for (User user : userForm.getUsers()) &#123; System.out.println(user.getFirstName() + \" - \" + user.getLastName()); &#125;&#125; HTML &lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"Save\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[0].firstName\" value=\"aaa\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[0].lastName\" value=\"bbb\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[1].firstName\" value=\"ccc\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[1].lastName\" value=\"ddd\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[2].firstName\" value=\"eee\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[2].lastName\" value=\"fff\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/form&gt; Set Model public class User &#123; private String firstName; private String lastName; ...&#125;public class UserSetForm &#123; private Set&lt;User&gt; users = new HashSet&lt;User&gt;(); public UserSetForm() &#123; users.add(new User()); users.add(new User()); users.add(new User()); &#125; ...&#125; Controller @RequestMapping(\"saysth.do\")public void test(UserSetForm userForm) &#123; for (User user : userForm.getUsers()) &#123; System.out.println(user.getFirstName() + \" - \" + user.getLastName()); &#125;&#125; HTML &lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"Save\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[0].firstName\" value=\"aaa\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[0].lastName\" value=\"bbb\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[1].firstName\" value=\"ccc\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[1].lastName\" value=\"ddd\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users[2].firstName\" value=\"eee\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users[2].lastName\" value=\"fff\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/form&gt; Map Model public class User &#123; private String firstName; private String lastName; ...&#125;public class UserMapForm &#123; private Map&lt;String, User&gt; users; ...&#125; Controller @RequestMapping(\"saysth.do\")public void test(UserMapForm userForm) &#123; for (Map.Entry&lt;String, User&gt; entry : userForm.getUsers().entrySet()) &#123; System.out.println(entry.getKey() + \": \" + entry.getValue().getFirstName() + \" - \" + entry.getValue().getLastName()); &#125;&#125; HTML &lt;form action=\"saysth.do\" method=\"post\"&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"Save\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users['x'].firstName\" value=\"aaa\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users['x'].lastName\" value=\"bbb\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users['y'].firstName\" value=\"ccc\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users['y'].lastName\" value=\"ddd\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input name=\"users['z'].firstName\" value=\"eee\" /&gt;&lt;/td&gt; &lt;td&gt;&lt;input name=\"users['z'].lastName\" value=\"fff\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/form&gt; Json前端的content type: contentType:’application/json;charset=utf-8’controller方法的参数使用@RequestBody Model public class User &#123; private String firstName; private String lastName; ...&#125; Controller @RequestMapping(\"json.do\")public void test(@RequestBody User user) &#123; return user;&#125; HTML var params = &#123; \"firstName\": \"张\", \"lastName\": \"三\", &#125;;$.ajax(&#123; type: 'post', url: 'json.do', contentType:'application/json;charset=utf-8', dataType: 'json', data: JSON.stringify(params), success: function(data)&#123; console.log(data); &#125;&#125;); XML pom.xml &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt; &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;&lt;/dependency&gt; Model public class User &#123; private String firstName; private String lastName; ...&#125; Controller @RequestMapping(\"xml.do\")public void xml(@RequestBody User user) &#123; return user;&#125; Postman POST /xml HTTP/1.1Host: localhost:8080Content-Type: application/xmlCache-Control: no-cachePostman-Token: 03933f48-c29b-bfb8-bb10-29ed5c2c237c&lt;user&gt; &lt;firstName&gt;张&lt;/firstName&gt; &lt;lastName&gt;三&lt;/lastName&gt;&lt;/user&gt;","categories":[{"name":"Backend","slug":"Backend","permalink":"http://oracle.xyz/categories/Backend/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://oracle.xyz/tags/Spring/"}]},{"title":"Spring Boot中MyBatis的传参方式","slug":"Spring-Boot-Mybatis-common-annotation","date":"2017-05-02T12:49:05.000Z","updated":"2017-10-13T05:28:15.497Z","comments":true,"path":"posts/Spring-Boot-Mybatis-common-annotation.html","link":"","permalink":"http://oracle.xyz/posts/Spring-Boot-Mybatis-common-annotation.html","excerpt":"","text":"有三种传参方式@Param@Insert(\"INSERT INTO USER(NAME, AGE) VALUES(#&#123;name&#125;, #&#123;age&#125;)\")int insert(@Param(\"name\") String name, @Param(\"age\") Integer age); MapMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put(\"name\", \"CCC\");map.put(\"age\", 40);userMapper.insertByMap(map); @Insert(\"INSERT INTO USER(NAME, AGE) VALUES(#&#123;name,jdbcType=VARCHAR&#125;, #&#123;age,jdbcType=INTEGER&#125;)\")int insertByMap(Map&lt;String, Object&gt; map); Object@Insert(\"INSERT INTO USER(NAME, AGE) VALUES(#&#123;name&#125;, #&#123;age&#125;)\")int insertByUser(User user); 返回结果的mapping-Result@Results(&#123; @Result(property = \"name\", column = \"name\"), @Result(property = \"age\", column = \"age\")&#125;)@Select(\"SELECT name, age FROM user\")List&lt;User&gt; findAll(); 增删改查public interface UserMapper &#123; @Select(\"SELECT * FROM user WHERE name = #&#123;name&#125;\") User findByName(@Param(\"name\") String name); @Insert(\"INSERT INTO user(name, age) VALUES(#&#123;name&#125;, #&#123;age&#125;)\") int insert(@Param(\"name\") String name, @Param(\"age\") Integer age); @Update(\"UPDATE user SET age=#&#123;age&#125; WHERE name=#&#123;name&#125;\") void update(User user); @Delete(\"DELETE FROM user WHERE id =#&#123;id&#125;\") void delete(Long id);&#125; Spring Boot中使用MyBatis注解配置详解 Mybatis Java API","categories":[{"name":"Backend","slug":"Backend","permalink":"http://oracle.xyz/categories/Backend/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://oracle.xyz/tags/Spring/"}]},{"title":"Intellij IDEA Spring Boot热加载","slug":"Intellij-IDEA-Spring-Boot-reload","date":"2017-05-02T09:00:09.000Z","updated":"2017-10-13T05:27:55.065Z","comments":true,"path":"posts/Intellij-IDEA-Spring-Boot-reload.html","link":"","permalink":"http://oracle.xyz/posts/Intellij-IDEA-Spring-Boot-reload.html","excerpt":"","text":"第一步：在项目pom文件中导入依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 第二步：修改Intellij IDEA的配置 CTRL +SHIFT +A 查找 make project automatically 并选中 CTRL +SHIFT+A 查找Registry 找到选项compile.automake.allow.when.app.running 重启IDEA","categories":[{"name":"Backend","slug":"Backend","permalink":"http://oracle.xyz/categories/Backend/"}],"tags":[]},{"title":"PLSQL并行处理的例子-parallel","slug":"plsql-parallel-util-file","date":"2017-04-28T11:58:27.000Z","updated":"2017-10-13T05:28:07.116Z","comments":true,"path":"posts/plsql-parallel-util-file.html","link":"","permalink":"http://oracle.xyz/posts/plsql-parallel-util-file.html","excerpt":"","text":"创建一个临时表并insert 一百万条记录, 然后读取这一百万条记录写入文件. 准备创建测试的表CREATE TABLE source_data ( x, y, z , CONSTRAINT source_data_pk PRIMARY KEY (x,y,z) ) ORGANIZATION INDEX AS SELECT ROWNUM AS x , RPAD(&apos;x&apos;,50,&apos;x&apos;) AS y , RPAD(&apos;y&apos;,50,&apos;y&apos;) AS z FROM dual CONNECT BY ROWNUM &lt;= 1000000; 存放测试文件的目录CREATE DIRECTORY dump_dir AS &apos;/u01/app/oracle/dir&apos;; 代码启用并行的管道函数 CREATE FUNCTION parallel_dump ( p_source IN SYS_REFCURSOR, p_filename IN VARCHAR2, p_directory IN VARCHAR2 ) RETURN dump_ntt PIPELINED PARALLEL_ENABLE (PARTITION p_source BY ANY) AS TYPE row_ntt IS TABLE OF VARCHAR2(32767); v_rows row_ntt; v_file UTL_FILE.FILE_TYPE; v_buffer VARCHAR2(32767); v_sid NUMBER; v_name VARCHAR2(128); v_lines PLS_INTEGER := 0; c_eol CONSTANT VARCHAR2(1) := CHR(10); c_eollen CONSTANT PLS_INTEGER := LENGTH(c_eol); c_maxline CONSTANT PLS_INTEGER := 32767;BEGIN SELECT sid INTO v_sid FROM v$mystat WHERE ROWNUM = 1; v_name := p_filename || &apos;_&apos; || TO_CHAR(v_sid) || &apos;.txt&apos;; v_file := UTL_FILE.FOPEN(p_directory, v_name, &apos;w&apos;, 32767); LOOP FETCH p_source BULK COLLECT INTO v_rows LIMIT 100; FOR i IN 1 .. v_rows.COUNT LOOP IF LENGTH(v_buffer) + c_eollen + LENGTH(v_rows(i)) &lt;= c_maxline THEN v_buffer := v_buffer || c_eol || v_rows(i); ELSE IF v_buffer IS NOT NULL THEN UTL_FILE.PUT_LINE(v_file, v_buffer); END IF; v_buffer := v_rows(i); END IF; END LOOP; v_lines := v_lines + v_rows.COUNT; EXIT WHEN p_source%NOTFOUND; END LOOP; CLOSE p_source; UTL_FILE.PUT_LINE(v_file, v_buffer); UTL_FILE.FCLOSE(v_file); PIPE ROW (dump_ot(v_name, v_lines, v_sid)); RETURN;END parallel_dump;/ 拆成4个子任务来生成文件 SELECT * FROM TABLE( parallel_dump( CURSOR(SELECT /*+ PARALLEL(s,4) */ x ||&apos;,&apos;|| y ||&apos;,&apos;|| z AS csv FROM source_data s), &apos;utl_file_parallel_pipelined&apos;, &apos;DUMP_DIR&apos; )) nt; 生成的测试文件: FILE_NAME NO_RECORDS SESSION_ID utl_file_parallel_pipelined_136.txt 190758 136 utl_file_parallel_pipelined_135.txt 192640 135 utl_file_parallel_pipelined_117.txt 288960 117 utl_file_parallel_pipelined_121.txt 327642 121 参考tuning pl/sql file i/oParallel PL/SQL launcher","categories":[{"name":"DB","slug":"DB","permalink":"http://oracle.xyz/categories/DB/"}],"tags":[]},{"title":"工作相关的代码整理","slug":"common-sql-package","date":"2017-04-21T13:53:51.000Z","updated":"2017-10-13T05:27:26.985Z","comments":true,"path":"posts/common-sql-package.html","link":"","permalink":"http://oracle.xyz/posts/common-sql-package.html","excerpt":"","text":"工具发送邮件 cux_fnd_sendmail_pkg多个附件DECLARE l_attachment_table cux_fnd_sendmail_pkg.t_attach_blob_table; ...BEGIN ... --添加到附件表 l_attachment_table(1).t_name := l_attach_file_name; l_attachment_table(1).t_ddl := g_zipped_blob; l_attachment_table(1).t_ext := &apos;zip&apos;; l_attachment_table(1).t_content_type := &apos;multipart/alternative&apos;; ... l_attachment_table(2).t_name := l_attach_file_name; l_attachment_table(2).t_ddl := cux_fnd_xls_pkg.finish; l_attachment_table(2).t_ext := &apos;xlsx&apos;; l_attachment_table(2).t_content_type := &apos;multipart/alternative&apos;; ... cux_fnd_sendmail_pkg.send_mail_attach_blob_t_c(p_from_email =&gt; &apos;erp@oracle.com&apos;, p_receiver_address =&gt; l_receiver_address, p_receive_name =&gt; l_receiver_address, p_email_subject =&gt; l_email_subject, p_email_body =&gt; l_email_body, p_cc_name =&gt; l_cc_address, p_attachment_table =&gt; l_attachment_table); END; 图文cux_fnd_sendmail_pkg.send_mail_with_image(p_from_email =&gt; v_sender_email, p_receiver_address =&gt; c_per.email_address, p_receive_name =&gt; c_per.last_name, p_email_subject =&gt; v_mail_title, p_email_body =&gt; v_mail_body, p_cc_name =&gt; v_cc_email, p_attachment_table =&gt; v_attach_blob_table); markdown cux_fnd_markdown_pkgcux_pay_tax_plan_pkg.report 汉字转拼音 cux_fnd_pinyin_pkgSELECT cux_fnd_pinyin_pkg.gethzfullpy(&apos;程宣峰&apos;) FROM dual 读取excel的内容 cux_fnd_read_xlsx_pkg/* 不建临时表使用excel上传文件. */cux_per_upload_email_pkg 创建excel cux_fnd_xls_pkgDECLARE l_csr SYS_REFCURSOR; l_data json;BEGIN -- 不需要绑定变量 cux_fnd_xls_pkg.query2sheet(p_sql =&gt; &apos;select last_name 姓名 from per_all_people_f where person_id=373732&apos;); cux_fnd_xls_save_pkg.output(&apos;简单的SQL&apos;);-- 在不知道有多少绑定变量, 或者绑定变量不固定的情况下使用 l_data := json(); l_data.put(&apos;person_id&apos;, 32087); cux_fnd_xls_pkg.query2sheet(p_sql =&gt; &apos;select last_name 姓名 from per_all_people_f where person_id=:person_id&apos; ,p_data_binding =&gt; l_data); cux_fnd_xls_save_pkg.output(&apos;需要绑定变量的SQL&apos;);-- 复杂的SQL的情况 OPEN l_csr FOR SELECT last_name 姓名 FROM per_all_people_f WHERE person_id = 373732; cux_fnd_xls_pkg.refcursor2sheet(p_ref_cursor =&gt; l_csr); cux_fnd_xls_save_pkg.output(&apos;系统游标&apos;);END; // 创建excel报表 cux_hcm_abs_deduct_pkg.report 导入文本文件csv配置导入的form 配置导入的功能, 表单为:CUX:上传本地数据. 参数为: APPL=”CUX” PROGRAME=”CUXPERUPLOADEMAIL” 读取文本的API: cux_import_interface_api DECLARE des cux_import_interface_api.descriptor_t; cells cux_import_interface_api.row_t;BEGIN des := cux_import_interface_api.open(p_file_id, --fnd_lobs p_file_cs, --字符集 p_delimiter, --分隔符 p_processing_id, 11); -- 11列 IF (cux_import_interface_api.is_empty(des) = TRUE) THEN raise_application_error(-20001, 'File is empty'); END IF; -- 略过标题 cux_import_interface_api.next_line(des); IF (cux_import_interface_api.is_end_of_file(des) = TRUE) THEN raise_application_error(-20001, 'File is empty'); END IF; cux_import_interface_api.next_line(des); WHILE (cux_import_interface_api.is_end_of_file(des) = FALSE) LOOP -- 取当前行的所有列 cux_import_interface_api.get_cell_set(des, cells); dbms_output.put_line(cells(1)); -- 打印第一列 dbms_output.put_line(cells(2)); -- 打印第二列 -- 读取下一行 cux_import_interface_api.next_line(des); END LOOP;END; 压缩文件DECLARE g_zipped_blob BLOB;BEGIN FOR rec IN csr LOOP cux_fnd_xls_pkg.add1file(g_zipped_blob, rec.file_name, rec.attachment_content); cux_fnd_xls_pkg.finish_zip(g_zipped_blob, &apos;&apos;); END LOOP;END; BPM 流程// 启动流程cux_bpm_utility_pkg.create_process// 启动空流程cux_bpm_utility_pkg.create_notify// 撤回cux_bpm_utility_pkg.abort_process// 审批通过cux_bpm_utility_pkg.approve_process// 拒绝cux_bpm_utility_pkg.reject_process// 当前审批人cux_bpm_common_pkg.get_uuap_username// 当前审批节点cux_bpm_utility_pkg.get_current_task_val MQ 数据同步hcm_common_pkg.call_plsql_main_json(p_plsql_api =&gt; &apos;cux_hcm_bo_pkg.get_pay_lines&apos;, p_msg_json =&gt; l_msg, p_http_apex =&gt; &apos;APEX&apos;, o_errcode =&gt; o_errcode, o_errmsg =&gt; o_errmsg); 百度hi通知接口 待整理 调用波塞冬的服务bp_databus_api_pkg.start_di_flow(p_di_request_id =&gt; -1, p_di_channel_code =&gt; &apos;PN_DC_UNFIN_PERMISSION&apos;, p_di_transformation_code =&gt; &apos;APPLAT_UNFIN_PERMISSION&apos;, p_di_job_codes =&gt; &apos;UNFIN_PERMISSION_USERINFO,UNFIN_PERMISSION_DUTY,UNFIN_PERMISSION_USERDUTY&apos;, p_di_business_batch_num =&gt; &apos;p_di_business_batch_num&apos;, p_di_operator =&gt; &apos;p_di_operator&apos;, p_di_batch_num =&gt; &apos;1,1,1&apos;, p_di_batch_sizes =&gt; l_di_batch_size, o_ret_code =&gt; l_error_code, o_ret_msg =&gt; l_error_msg); FYI小熊通知主库小熊通知表: cux_ext_notifications_pub.create_fyi_msg分库小熊通知表: cux_ext_polar_fyi_pub.create_fyi_msg MD5加密SELECT utl_raw.cast_to_raw(dbms_obfuscation_toolkit.md5(input_string =&gt; &apos;chengxuanfeng&apos;)) FROM dual; 对url进行编码和解码BEGIN dbms_output.put_line(utl_url.escape(&apos;http://www.baidu.com/参数/=+/&apos;,TRUE,&apos;UTF8&apos;)); dbms_output.put_line(utl_url.escape(&apos;http://www.baidu.com/参数/=+/&apos;,false,&apos;UTF8&apos;)); dbms_output.put_line( utl_url.unescape(&apos;http%3A%2F%2Fwww.baidu.com%2F%E5%8F%82%E6%95%B0%2F%3D%2B%2F&apos;,&apos;UTF8&apos;));END; 调用web请求FUNCTION get_audio(p_text IN VARCHAR2) RETURN BLOB IS l_req_blob BLOB; l_res_blob BLOB; l_url VARCHAR2(32767) := get_tts_url(); l_cuid VARCHAR2(32767); l_req utl_http.req; l_res utl_http.resp;BEGIN SELECT instance || &apos;-&apos; || &apos;-&apos; || userenv(&apos;sessionid&apos;) INTO l_cuid FROM v$thread; l_url := REPLACE(l_url, &apos;#text#&apos;, p_text || chr(38)); l_url := REPLACE(l_url, &apos;#token#&apos;, get_access_token); l_url := REPLACE(l_url, &apos;#cuid#&apos;, l_cuid); log(l_url); l_req := utl_http.begin_request(l_url, &apos;GET&apos;); dbms_lob.createtemporary(lob_loc =&gt; l_req_blob, cache =&gt; FALSE); utl_http.write_raw(l_req, l_req_blob); l_res := utl_http.get_response(l_req); dbms_output.put_line(&apos;Response&gt; status_code: &quot;&apos; || l_res.status_code || &apos;&quot;&apos;); dbms_output.put_line(&apos;Response&gt; reason_phrase: &quot;&apos; || l_res.reason_phrase || &apos;&quot;&apos;); dbms_output.put_line(&apos;Response&gt; http_version: &quot;&apos; || l_res.http_version || &apos;&quot;&apos;); DECLARE l_raw_data RAW(512); --chunk_size CONSTANT INTEGER := 512; BEGIN dbms_lob.createtemporary(l_res_blob, FALSE); LOOP BEGIN utl_http.read_raw(l_res, l_raw_data); IF l_raw_data IS NOT NULL THEN dbms_lob.writeappend(l_res_blob, utl_raw.length(l_raw_data), l_raw_data); END IF; EXCEPTION WHEN utl_http.end_of_body THEN utl_http.end_response(l_res); EXIT; END; END LOOP; END; IF l_req.private_hndl IS NOT NULL THEN utl_http.end_request(l_req); END IF; IF l_res.private_hndl IS NOT NULL THEN utl_http.end_response(l_res); END IF; --dbms_lob.freetemporary(l_res_blob); RETURN l_res_blob;END; --发送hi, 默认文本. PROCEDURE hi(p_message_type IN VARCHAR2 := &apos;text&apos;, p_hi_number IN VARCHAR2, p_content IN VARCHAR2) IS l_response_text VARCHAR2(2000); l_url VARCHAR2(32767) := get_hi_service(); l_payload CLOB := get_hi_payload(); BEGIN l_payload := REPLACE(l_payload, &apos;#MESSAGE_TYPE#&apos;, p_message_type); l_payload := REPLACE(l_payload, &apos;#HI_NUMBER#&apos;, p_hi_number); l_payload := REPLACE(l_payload, &apos;#CONTENT#&apos;, p_content); -- apex_web_service.g_request_headers(1).name := &apos;Content-Type&apos;; apex_web_service.g_request_headers(1).value := &apos;application/x-www-form-urlencoded&apos;; l_response_text := apex_web_service.make_rest_request(p_url =&gt; l_url, p_http_method =&gt; &apos;POST&apos;, p_body =&gt; l_payload); log(l_response_text); END;","categories":[{"name":"DB","slug":"DB","permalink":"http://oracle.xyz/categories/DB/"}],"tags":[]},{"title":"日常运维的查询 - FND","slug":"common-sql-query","date":"2017-04-21T09:41:51.000Z","updated":"2017-10-13T05:27:32.080Z","comments":true,"path":"posts/common-sql-query.html","link":"","permalink":"http://oracle.xyz/posts/common-sql-query.html","excerpt":"","text":"Alert - 查询预警邮件的日志SELECT extractvalue(xmltype(O.&quot;SYS_NC00040$&quot;), &apos;//SUBJECT&apos;) subject ,to_char(enq_time, &apos;YYYY/MM/DD HH24:MI:SS&apos;) end_time ,row_number() over(ORDER BY enq_time DESC) rn FROM apps.wf_notification_out o WHERE o.corrid LIKE &apos;APPS:ALR%&apos;; Concurent请求名称对应的可执行文件SELECT e.execution_file_name FROM fnd_concurrent_programs p ,fnd_executables e WHERE p.executable_id = e.executable_id AND p.concurrent_program_id IN (SELECT t.concurrent_program_id FROM fnd_concurrent_programs_tl t WHERE t.user_concurrent_program_name = &apos;请求名称&apos;); 请求运行时正在执行的SQLSELECT s.* FROM fnd_concurrent_requests r, v$session v, v$sql s WHERE r.oracle_session_id = v.audsid AND v.sql_id = s.sql_id AND r.request_id = 543339; Apex restful// 查询select * from apex_rest_resource_modules WHERE workspace LIKE &apos;%MQ%&apos;; // apex urlselect * from apex_rest_resource_handlers WHERE workspace LIKE &apos;%MQ%&apos;; select * from apex_rest_resource_parameters WHERE workspace LIKE &apos;%MQ%&apos;; select * from apex_rest_resource_templates WHERE workspace LIKE &apos;%MQ%&apos;;// 清空apex的workspaceBEGIN apex_instance_admin.remove_workspace(&apos;MQBONUS&apos;); END;","categories":[{"name":"DB","slug":"DB","permalink":"http://oracle.xyz/categories/DB/"}],"tags":[]}]}